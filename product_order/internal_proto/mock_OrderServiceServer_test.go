// Code generated by mockery v2.42.2. DO NOT EDIT.

package proto_gen

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockOrderServiceServer is an autogenerated mock type for the OrderServiceServer type
type MockOrderServiceServer struct {
	mock.Mock
}

type MockOrderServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderServiceServer) EXPECT() *MockOrderServiceServer_Expecter {
	return &MockOrderServiceServer_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: _a0, _a1
func (_m *MockOrderServiceServer) CreateOrder(_a0 context.Context, _a1 *CreateOrderRequest) (*CreateOrderResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *CreateOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateOrderRequest) *CreateOrderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderServiceServer_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockOrderServiceServer_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *CreateOrderRequest
func (_e *MockOrderServiceServer_Expecter) CreateOrder(_a0 interface{}, _a1 interface{}) *MockOrderServiceServer_CreateOrder_Call {
	return &MockOrderServiceServer_CreateOrder_Call{Call: _e.mock.On("CreateOrder", _a0, _a1)}
}

func (_c *MockOrderServiceServer_CreateOrder_Call) Run(run func(_a0 context.Context, _a1 *CreateOrderRequest)) *MockOrderServiceServer_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*CreateOrderRequest))
	})
	return _c
}

func (_c *MockOrderServiceServer_CreateOrder_Call) Return(_a0 *CreateOrderResponse, _a1 error) *MockOrderServiceServer_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderServiceServer_CreateOrder_Call) RunAndReturn(run func(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)) *MockOrderServiceServer_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function with given fields: _a0, _a1
func (_m *MockOrderServiceServer) GetOrder(_a0 context.Context, _a1 *GetOrderRequest) (*GetOrderResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *GetOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetOrderRequest) (*GetOrderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetOrderRequest) *GetOrderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderServiceServer_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type MockOrderServiceServer_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *GetOrderRequest
func (_e *MockOrderServiceServer_Expecter) GetOrder(_a0 interface{}, _a1 interface{}) *MockOrderServiceServer_GetOrder_Call {
	return &MockOrderServiceServer_GetOrder_Call{Call: _e.mock.On("GetOrder", _a0, _a1)}
}

func (_c *MockOrderServiceServer_GetOrder_Call) Run(run func(_a0 context.Context, _a1 *GetOrderRequest)) *MockOrderServiceServer_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetOrderRequest))
	})
	return _c
}

func (_c *MockOrderServiceServer_GetOrder_Call) Return(_a0 *GetOrderResponse, _a1 error) *MockOrderServiceServer_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderServiceServer_GetOrder_Call) RunAndReturn(run func(context.Context, *GetOrderRequest) (*GetOrderResponse, error)) *MockOrderServiceServer_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function with given fields: _a0, _a1
func (_m *MockOrderServiceServer) GetOrders(_a0 context.Context, _a1 *GetOrdersRequest) (*GetOrdersResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 *GetOrdersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetOrdersRequest) *GetOrdersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetOrdersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetOrdersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderServiceServer_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type MockOrderServiceServer_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *GetOrdersRequest
func (_e *MockOrderServiceServer_Expecter) GetOrders(_a0 interface{}, _a1 interface{}) *MockOrderServiceServer_GetOrders_Call {
	return &MockOrderServiceServer_GetOrders_Call{Call: _e.mock.On("GetOrders", _a0, _a1)}
}

func (_c *MockOrderServiceServer_GetOrders_Call) Run(run func(_a0 context.Context, _a1 *GetOrdersRequest)) *MockOrderServiceServer_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetOrdersRequest))
	})
	return _c
}

func (_c *MockOrderServiceServer_GetOrders_Call) Return(_a0 *GetOrdersResponse, _a1 error) *MockOrderServiceServer_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderServiceServer_GetOrders_Call) RunAndReturn(run func(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)) *MockOrderServiceServer_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedOrderServiceServer provides a mock function with given fields:
func (_m *MockOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {
	_m.Called()
}

// MockOrderServiceServer_mustEmbedUnimplementedOrderServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedOrderServiceServer'
type MockOrderServiceServer_mustEmbedUnimplementedOrderServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedOrderServiceServer is a helper method to define mock.On call
func (_e *MockOrderServiceServer_Expecter) mustEmbedUnimplementedOrderServiceServer() *MockOrderServiceServer_mustEmbedUnimplementedOrderServiceServer_Call {
	return &MockOrderServiceServer_mustEmbedUnimplementedOrderServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedOrderServiceServer")}
}

func (_c *MockOrderServiceServer_mustEmbedUnimplementedOrderServiceServer_Call) Run(run func()) *MockOrderServiceServer_mustEmbedUnimplementedOrderServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOrderServiceServer_mustEmbedUnimplementedOrderServiceServer_Call) Return() *MockOrderServiceServer_mustEmbedUnimplementedOrderServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOrderServiceServer_mustEmbedUnimplementedOrderServiceServer_Call) RunAndReturn(run func()) *MockOrderServiceServer_mustEmbedUnimplementedOrderServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderServiceServer creates a new instance of MockOrderServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderServiceServer {
	mock := &MockOrderServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

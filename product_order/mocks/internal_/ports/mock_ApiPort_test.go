// Code generated by mockery v2.42.2. DO NOT EDIT.

package ports

import (
	context "context"
	domains "product_order/internal/application/core/domains"

	mock "github.com/stretchr/testify/mock"
)

// ApiPort is an autogenerated mock type for the ApiPort type
type ApiPort struct {
	mock.Mock
}

type ApiPort_Expecter struct {
	mock *mock.Mock
}

func (_m *ApiPort) EXPECT() *ApiPort_Expecter {
	return &ApiPort_Expecter{mock: &_m.Mock}
}

// GetFullOrder provides a mock function with given fields: ctx, orderID
func (_m *ApiPort) GetFullOrder(ctx context.Context, orderID int32) (domains.Order, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetFullOrder")
	}

	var r0 domains.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (domains.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) domains.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(domains.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApiPort_GetFullOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFullOrder'
type ApiPort_GetFullOrder_Call struct {
	*mock.Call
}

// GetFullOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderID int32
func (_e *ApiPort_Expecter) GetFullOrder(ctx interface{}, orderID interface{}) *ApiPort_GetFullOrder_Call {
	return &ApiPort_GetFullOrder_Call{Call: _e.mock.On("GetFullOrder", ctx, orderID)}
}

func (_c *ApiPort_GetFullOrder_Call) Run(run func(ctx context.Context, orderID int32)) *ApiPort_GetFullOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *ApiPort_GetFullOrder_Call) Return(_a0 domains.Order, _a1 error) *ApiPort_GetFullOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ApiPort_GetFullOrder_Call) RunAndReturn(run func(context.Context, int32) (domains.Order, error)) *ApiPort_GetFullOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewApiPort creates a new instance of ApiPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApiPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApiPort {
	mock := &ApiPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

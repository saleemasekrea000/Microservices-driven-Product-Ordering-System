// Code generated by mockery v2.42.2. DO NOT EDIT.

package proto_gen

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockProductServiceClient is an autogenerated mock type for the ProductServiceClient type
type MockProductServiceClient struct {
	mock.Mock
}

type MockProductServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductServiceClient) EXPECT() *MockProductServiceClient_Expecter {
	return &MockProductServiceClient_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function with given fields: ctx, in, opts
func (_m *MockProductServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *CreateProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateProductRequest, ...grpc.CallOption) (*CreateProductResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateProductRequest, ...grpc.CallOption) *CreateProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateProductRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductServiceClient_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockProductServiceClient_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - in *CreateProductRequest
//   - opts ...grpc.CallOption
func (_e *MockProductServiceClient_Expecter) CreateProduct(ctx interface{}, in interface{}, opts ...interface{}) *MockProductServiceClient_CreateProduct_Call {
	return &MockProductServiceClient_CreateProduct_Call{Call: _e.mock.On("CreateProduct",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProductServiceClient_CreateProduct_Call) Run(run func(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption)) *MockProductServiceClient_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*CreateProductRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProductServiceClient_CreateProduct_Call) Return(_a0 *CreateProductResponse, _a1 error) *MockProductServiceClient_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductServiceClient_CreateProduct_Call) RunAndReturn(run func(context.Context, *CreateProductRequest, ...grpc.CallOption) (*CreateProductResponse, error)) *MockProductServiceClient_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProduct provides a mock function with given fields: ctx, in, opts
func (_m *MockProductServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *GetProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetProductRequest, ...grpc.CallOption) (*GetProductResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetProductRequest, ...grpc.CallOption) *GetProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetProductRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductServiceClient_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type MockProductServiceClient_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetProductRequest
//   - opts ...grpc.CallOption
func (_e *MockProductServiceClient_Expecter) GetProduct(ctx interface{}, in interface{}, opts ...interface{}) *MockProductServiceClient_GetProduct_Call {
	return &MockProductServiceClient_GetProduct_Call{Call: _e.mock.On("GetProduct",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProductServiceClient_GetProduct_Call) Run(run func(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption)) *MockProductServiceClient_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetProductRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProductServiceClient_GetProduct_Call) Return(_a0 *GetProductResponse, _a1 error) *MockProductServiceClient_GetProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductServiceClient_GetProduct_Call) RunAndReturn(run func(context.Context, *GetProductRequest, ...grpc.CallOption) (*GetProductResponse, error)) *MockProductServiceClient_GetProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProducts provides a mock function with given fields: ctx, in, opts
func (_m *MockProductServiceClient) GetProducts(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption) (*GetProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 *GetProductsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetProductsRequest, ...grpc.CallOption) (*GetProductsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetProductsRequest, ...grpc.CallOption) *GetProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetProductsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetProductsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductServiceClient_GetProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProducts'
type MockProductServiceClient_GetProducts_Call struct {
	*mock.Call
}

// GetProducts is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetProductsRequest
//   - opts ...grpc.CallOption
func (_e *MockProductServiceClient_Expecter) GetProducts(ctx interface{}, in interface{}, opts ...interface{}) *MockProductServiceClient_GetProducts_Call {
	return &MockProductServiceClient_GetProducts_Call{Call: _e.mock.On("GetProducts",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProductServiceClient_GetProducts_Call) Run(run func(ctx context.Context, in *GetProductsRequest, opts ...grpc.CallOption)) *MockProductServiceClient_GetProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetProductsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockProductServiceClient_GetProducts_Call) Return(_a0 *GetProductsResponse, _a1 error) *MockProductServiceClient_GetProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductServiceClient_GetProducts_Call) RunAndReturn(run func(context.Context, *GetProductsRequest, ...grpc.CallOption) (*GetProductsResponse, error)) *MockProductServiceClient_GetProducts_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProductServiceClient creates a new instance of MockProductServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductServiceClient {
	mock := &MockProductServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

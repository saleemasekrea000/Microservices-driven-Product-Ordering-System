// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	proto_gen "order/proto_gen"
)

// OrderServiceClient is an autogenerated mock type for the OrderServiceClient type
type OrderServiceClient struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderServiceClient) CreateOrder(ctx context.Context, in *proto_gen.CreateOrderRequest, opts ...grpc.CallOption) (*proto_gen.CreateOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *proto_gen.CreateOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.CreateOrderRequest, ...grpc.CallOption) (*proto_gen.CreateOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.CreateOrderRequest, ...grpc.CallOption) *proto_gen.CreateOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto_gen.CreateOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto_gen.CreateOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderServiceClient) GetOrder(ctx context.Context, in *proto_gen.GetOrderRequest, opts ...grpc.CallOption) (*proto_gen.GetOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *proto_gen.GetOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.GetOrderRequest, ...grpc.CallOption) (*proto_gen.GetOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.GetOrderRequest, ...grpc.CallOption) *proto_gen.GetOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto_gen.GetOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto_gen.GetOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, in, opts
func (_m *OrderServiceClient) GetOrders(ctx context.Context, in *proto_gen.GetOrdersRequest, opts ...grpc.CallOption) (*proto_gen.GetOrdersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 *proto_gen.GetOrdersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.GetOrdersRequest, ...grpc.CallOption) (*proto_gen.GetOrdersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.GetOrdersRequest, ...grpc.CallOption) *proto_gen.GetOrdersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto_gen.GetOrdersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto_gen.GetOrdersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderServiceClient creates a new instance of OrderServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderServiceClient {
	mock := &OrderServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

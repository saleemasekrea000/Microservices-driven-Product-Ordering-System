// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "product/internal/application/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// ApiPort is an autogenerated mock type for the ApiPort type
type ApiPort struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, product
func (_m *ApiPort) CreateProduct(ctx context.Context, product domain.Product) (domain.Product, error) {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) (domain.Product, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) domain.Product); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductById provides a mock function with given fields: ctx, id
func (_m *ApiPort) GetProductById(ctx context.Context, id int32) (domain.Product, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductById")
	}

	var r0 domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (domain.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) domain.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: ctx, limit, offset
func (_m *ApiPort) ListProducts(ctx context.Context, limit int32, offset int32) ([]domain.Product, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) ([]domain.Product, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) []domain.Product); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApiPort creates a new instance of ApiPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApiPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApiPort {
	mock := &ApiPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

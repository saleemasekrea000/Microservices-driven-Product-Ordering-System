// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	generated "order/internal/adapters/db/generated"

	mock "github.com/stretchr/testify/mock"
)

// DBPort is an autogenerated mock type for the DBPort type
type DBPort struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, arg
func (_m *DBPort) CreateOrder(ctx context.Context, arg generated.CreateOrderParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.CreateOrderParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrderItems provides a mock function with given fields: ctx, arg
func (_m *DBPort) CreateOrderItems(ctx context.Context, arg generated.CreateOrderItemsParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrderItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.CreateOrderItemsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrder provides a mock function with given fields: ctx, id
func (_m *DBPort) DeleteOrder(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOrderItems provides a mock function with given fields: ctx, id
func (_m *DBPort) DeleteOrderItems(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrderItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrder provides a mock function with given fields: ctx, id
func (_m *DBPort) GetOrder(ctx context.Context, id int32) ([]generated.GetOrderRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 []generated.GetOrderRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]generated.GetOrderRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []generated.GetOrderRow); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]generated.GetOrderRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderItems provides a mock function with given fields: ctx, id
func (_m *DBPort) GetOrderItems(ctx context.Context, id int32) ([]generated.OrderItem, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderItems")
	}

	var r0 []generated.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]generated.OrderItem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []generated.OrderItem); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]generated.OrderItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, arg
func (_m *DBPort) GetOrders(ctx context.Context, arg generated.GetOrdersParams) ([]generated.GetOrdersRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []generated.GetOrdersRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.GetOrdersParams) ([]generated.GetOrdersRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, generated.GetOrdersParams) []generated.GetOrdersRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]generated.GetOrdersRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, generated.GetOrdersParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, arg
func (_m *DBPort) UpdateOrder(ctx context.Context, arg generated.UpdateOrderParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.UpdateOrderParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderItems provides a mock function with given fields: ctx, arg
func (_m *DBPort) UpdateOrderItems(ctx context.Context, arg generated.UpdateOrderItemsParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, generated.UpdateOrderItemsParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDBPort creates a new instance of DBPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBPort {
	mock := &DBPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

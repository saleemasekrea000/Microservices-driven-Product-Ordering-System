// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	proto_gen "order/proto_gen"

	mock "github.com/stretchr/testify/mock"
)

// OrderServiceServer is an autogenerated mock type for the OrderServiceServer type
type OrderServiceServer struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: _a0, _a1
func (_m *OrderServiceServer) CreateOrder(_a0 context.Context, _a1 *proto_gen.CreateOrderRequest) (*proto_gen.CreateOrderResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *proto_gen.CreateOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.CreateOrderRequest) (*proto_gen.CreateOrderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.CreateOrderRequest) *proto_gen.CreateOrderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto_gen.CreateOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto_gen.CreateOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: _a0, _a1
func (_m *OrderServiceServer) GetOrder(_a0 context.Context, _a1 *proto_gen.GetOrderRequest) (*proto_gen.GetOrderResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *proto_gen.GetOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.GetOrderRequest) (*proto_gen.GetOrderResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.GetOrderRequest) *proto_gen.GetOrderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto_gen.GetOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto_gen.GetOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: _a0, _a1
func (_m *OrderServiceServer) GetOrders(_a0 context.Context, _a1 *proto_gen.GetOrdersRequest) (*proto_gen.GetOrdersResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 *proto_gen.GetOrdersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.GetOrdersRequest) (*proto_gen.GetOrdersResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.GetOrdersRequest) *proto_gen.GetOrdersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto_gen.GetOrdersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto_gen.GetOrdersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedOrderServiceServer provides a mock function with given fields:
func (_m *OrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {
	_m.Called()
}

// NewOrderServiceServer creates a new instance of OrderServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderServiceServer {
	mock := &OrderServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	proto_gen "product/proto_gen"

	mock "github.com/stretchr/testify/mock"
)

// ProductServiceServer is an autogenerated mock type for the ProductServiceServer type
type ProductServiceServer struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) CreateProduct(_a0 context.Context, _a1 *proto_gen.CreateProductRequest) (*proto_gen.CreateProductResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *proto_gen.CreateProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.CreateProductRequest) (*proto_gen.CreateProductResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.CreateProductRequest) *proto_gen.CreateProductResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto_gen.CreateProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto_gen.CreateProductRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) GetProduct(_a0 context.Context, _a1 *proto_gen.GetProductRequest) (*proto_gen.GetProductResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *proto_gen.GetProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.GetProductRequest) (*proto_gen.GetProductResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.GetProductRequest) *proto_gen.GetProductResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto_gen.GetProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto_gen.GetProductRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) GetProducts(_a0 context.Context, _a1 *proto_gen.GetProductsRequest) (*proto_gen.GetProductsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 *proto_gen.GetProductsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.GetProductsRequest) (*proto_gen.GetProductsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto_gen.GetProductsRequest) *proto_gen.GetProductsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto_gen.GetProductsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto_gen.GetProductsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedProductServiceServer provides a mock function with given fields:
func (_m *ProductServiceServer) mustEmbedUnimplementedProductServiceServer() {
	_m.Called()
}

// NewProductServiceServer creates a new instance of ProductServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductServiceServer {
	mock := &ProductServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

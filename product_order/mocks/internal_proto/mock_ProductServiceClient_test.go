// Code generated by mockery v2.42.2. DO NOT EDIT.

package proto_gen

import (
	context "context"

	grpc "google.golang.org/grpc"

	internal_proto "product_order/internal_proto"

	mock "github.com/stretchr/testify/mock"
)

// ProductServiceClient is an autogenerated mock type for the ProductServiceClient type
type ProductServiceClient struct {
	mock.Mock
}

type ProductServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductServiceClient) EXPECT() *ProductServiceClient_Expecter {
	return &ProductServiceClient_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function with given fields: ctx, in, opts
func (_m *ProductServiceClient) CreateProduct(ctx context.Context, in *internal_proto.CreateProductRequest, opts ...grpc.CallOption) (*internal_proto.CreateProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *internal_proto.CreateProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internal_proto.CreateProductRequest, ...grpc.CallOption) (*internal_proto.CreateProductResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internal_proto.CreateProductRequest, ...grpc.CallOption) *internal_proto.CreateProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal_proto.CreateProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internal_proto.CreateProductRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductServiceClient_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type ProductServiceClient_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - in *internal_proto.CreateProductRequest
//   - opts ...grpc.CallOption
func (_e *ProductServiceClient_Expecter) CreateProduct(ctx interface{}, in interface{}, opts ...interface{}) *ProductServiceClient_CreateProduct_Call {
	return &ProductServiceClient_CreateProduct_Call{Call: _e.mock.On("CreateProduct",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductServiceClient_CreateProduct_Call) Run(run func(ctx context.Context, in *internal_proto.CreateProductRequest, opts ...grpc.CallOption)) *ProductServiceClient_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*internal_proto.CreateProductRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductServiceClient_CreateProduct_Call) Return(_a0 *internal_proto.CreateProductResponse, _a1 error) *ProductServiceClient_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductServiceClient_CreateProduct_Call) RunAndReturn(run func(context.Context, *internal_proto.CreateProductRequest, ...grpc.CallOption) (*internal_proto.CreateProductResponse, error)) *ProductServiceClient_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProduct provides a mock function with given fields: ctx, in, opts
func (_m *ProductServiceClient) GetProduct(ctx context.Context, in *internal_proto.GetProductRequest, opts ...grpc.CallOption) (*internal_proto.GetProductResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *internal_proto.GetProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internal_proto.GetProductRequest, ...grpc.CallOption) (*internal_proto.GetProductResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internal_proto.GetProductRequest, ...grpc.CallOption) *internal_proto.GetProductResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal_proto.GetProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internal_proto.GetProductRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductServiceClient_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type ProductServiceClient_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - in *internal_proto.GetProductRequest
//   - opts ...grpc.CallOption
func (_e *ProductServiceClient_Expecter) GetProduct(ctx interface{}, in interface{}, opts ...interface{}) *ProductServiceClient_GetProduct_Call {
	return &ProductServiceClient_GetProduct_Call{Call: _e.mock.On("GetProduct",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductServiceClient_GetProduct_Call) Run(run func(ctx context.Context, in *internal_proto.GetProductRequest, opts ...grpc.CallOption)) *ProductServiceClient_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*internal_proto.GetProductRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductServiceClient_GetProduct_Call) Return(_a0 *internal_proto.GetProductResponse, _a1 error) *ProductServiceClient_GetProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductServiceClient_GetProduct_Call) RunAndReturn(run func(context.Context, *internal_proto.GetProductRequest, ...grpc.CallOption) (*internal_proto.GetProductResponse, error)) *ProductServiceClient_GetProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProducts provides a mock function with given fields: ctx, in, opts
func (_m *ProductServiceClient) GetProducts(ctx context.Context, in *internal_proto.GetProductsRequest, opts ...grpc.CallOption) (*internal_proto.GetProductsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 *internal_proto.GetProductsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internal_proto.GetProductsRequest, ...grpc.CallOption) (*internal_proto.GetProductsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internal_proto.GetProductsRequest, ...grpc.CallOption) *internal_proto.GetProductsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal_proto.GetProductsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internal_proto.GetProductsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductServiceClient_GetProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProducts'
type ProductServiceClient_GetProducts_Call struct {
	*mock.Call
}

// GetProducts is a helper method to define mock.On call
//   - ctx context.Context
//   - in *internal_proto.GetProductsRequest
//   - opts ...grpc.CallOption
func (_e *ProductServiceClient_Expecter) GetProducts(ctx interface{}, in interface{}, opts ...interface{}) *ProductServiceClient_GetProducts_Call {
	return &ProductServiceClient_GetProducts_Call{Call: _e.mock.On("GetProducts",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ProductServiceClient_GetProducts_Call) Run(run func(ctx context.Context, in *internal_proto.GetProductsRequest, opts ...grpc.CallOption)) *ProductServiceClient_GetProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*internal_proto.GetProductsRequest), variadicArgs...)
	})
	return _c
}

func (_c *ProductServiceClient_GetProducts_Call) Return(_a0 *internal_proto.GetProductsResponse, _a1 error) *ProductServiceClient_GetProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductServiceClient_GetProducts_Call) RunAndReturn(run func(context.Context, *internal_proto.GetProductsRequest, ...grpc.CallOption) (*internal_proto.GetProductsResponse, error)) *ProductServiceClient_GetProducts_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductServiceClient creates a new instance of ProductServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductServiceClient {
	mock := &ProductServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
